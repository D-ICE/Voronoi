#include <Voronoi.hpp>
#include <fstream>
#include <map>

template <class T> struct Vector
{
    T x, y;
    constexpr Vector operator-(const Vector& other) { return {x - other.x, y - other.y}; }
};

static constexpr size_t pointCount = 356;
extern Vector<float> points[pointCount];

int main()
{
    auto discardOutside = [&](const auto& voronoiVertex)
    {
        auto sorted = voronoiVertex.triangle;
        std::sort(sorted.begin(), sorted.end());
        auto normalA = *sorted[1] - *sorted[0];
        auto normalB = *sorted[2] - *sorted[0];
        auto winding = normalA.x*normalB.y - normalA.y*normalB.x >= 0;
        return winding;
    };
    auto diagram = Voronoi::generate(points, points + pointCount, discardOutside);

    std::ofstream svg{"medial_axis.svg"};

    svg << R"(<?xml version="1.0" encoding="UTF-8"?>)";
    svg << R"(<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" )"
           R"(viewBox="0 0 370 370" style="background-color: #1e1e1e">)";

    for (const auto& vertex : diagram.vertices)
    {
        if (!discardOutside(vertex))
        {
            svg << R"(<polygon points=")";
            svg << vertex.triangle[0]->x << "," << vertex.triangle[0]->y << " ";
            svg << vertex.triangle[1]->x << "," << vertex.triangle[1]->y << " ";
            svg << vertex.triangle[2]->x << "," << vertex.triangle[2]->y << " ";
            svg << R"(" fill="rgba(255, 60, 100, 0.5) " stroke="rgb(255, 60, 100) " stroke-width="0.5" />)";
        }
    }

    for (auto& cell : diagram.cells)
    {
        auto incidentEdge = cell.incidentEdge;
        auto edge = incidentEdge;
        do {
            if (edge->isFinite())
            {
                svg << R"(<polyline points=")";
                svg << edge->vertex->circumcenter.x << ", " << edge->vertex->circumcenter.y << " ";
                svg << edge->twin->vertex->circumcenter.x << ", " << edge->twin->vertex->circumcenter.y << " ";
                svg << R"(" fill="none" stroke="rgba(180, 255, 240, 0.5) " stroke-width="1.5" />)";
            }
        } while ((edge = edge->next) != incidentEdge);
    }

    for (auto& point : points)
        svg << R"(<circle cx=")" << point.x << R"(" cy=")" << point.y << R"(" r="1.0" fill="white" />)";


    auto* vertex = &diagram.vertices[0];
    auto* predecessor = vertex;
    std::map<decltype(vertex), decltype(vertex)> branches = {};
    std::vector<decltype(branches.begin())> openBranches;

    while (true)
    {
        decltype(vertex) successor[2] = { nullptr };
        auto* incidentEdge = vertex->incidentEdge;
        auto* edge = incidentEdge;

        do {
            if (edge->isFinite())
            {
                auto* adjacent = edge->twin->vertex;
                if (adjacent != predecessor) successor[successor[0] != nullptr] = adjacent;
            }
        } while ((edge = edge->twin->next) != incidentEdge);

        if (successor[1])
        {
            if (auto branch = branches.find(vertex); branch != branches.end())
            {
                // Branch already exists, we will ignore this vertex
                successor[0] = nullptr;
                if (auto open = std::find(openBranches.begin(), openBranches.end(), branch); open != openBranches.end())
                    openBranches.erase(open);
            }
            else
            {
                openBranches.push_back(branches.insert({ vertex, successor[1] }).first);
                svg << R"(<circle cx=")" << vertex->circumcenter.x << R"(" cy=")" 
                                         << vertex->circumcenter.y << R"(" r="1.5" fill="rgb(70, 255, 200) " />)";
            }
        }

        if (successor[0])
        {
            // Arrived at the root vertex, medial axis is a closed circle
            if (successor[0] == &diagram.vertices[0])
                break;

            predecessor = vertex;
            vertex = successor[0];
        }
        else if (!openBranches.empty())
        {
            predecessor = openBranches.back()->first;
            vertex = openBranches.back()->second;
            openBranches.pop_back();
        }
        else break;

    }

    svg << "</svg>\n";

    return 0;
}

Vector<float> points[] = {
        {58.010803, 4.4401407}, {55.8975, 6.6502957}, {53.829098, 9.8896055}, {51.867462, 14.048463}, {49.830936, 18.653103}, {47.36963, 22.93787}, {44.191784, 26.227526},
        {40.305836, 28.518654}, {35.892708, 30.29637}, {31.200928, 31.925905}, {26.614368, 33.617558}, {22.523571, 35.560192}, {19.118774, 37.998367}, {16.316908, 41.110355},
        {13.920128, 44.801815}, {11.769277, 48.840195}, {9.69323, 52.95234}, {7.3927045, 56.896614}, {4.634297, 60.50766}, {2.020675, 64.25679}, {1.3076723, 69.32034},
        {1.6375661, 74.68767}, {2.6688516, 79.62901}, {4.3715773, 83.74867}, {6.826973, 86.87929}, {10.148936, 89.02056}, {14.363062, 90.33815}, {19.374264, 91.12638},
        {24.995487, 91.70774}, {30.96341, 92.37112}, {36.972736, 93.30851}, {42.741405, 94.61838}, {43.140507, 100.2153}, {42.83925, 105.747246}, {41.800827, 110.83611},
        {40.212357, 115.402664}, {38.345318, 119.65996}, {36.393852, 123.8448}, {34.432697, 128.04538}, {32.502247, 132.23648}, {30.67159, 136.43076}, {29.031622, 140.73157},
        {27.60883, 145.35205}, {26.330154, 150.40508}, {25.105303, 155.67378}, {23.955214, 160.66151}, {23.07341, 164.98274}, {22.713835, 168.73749}, {23.010332, 172.48293},
        {23.808676, 176.793}, {24.870283, 181.79228}, {26.045013, 187.1039}, {27.355093, 192.20569}, {28.899591, 196.85007}, {30.72664, 201.12117}, {32.80809, 205.16388},
        {35.0992, 208.99236}, {37.57754, 212.64182}, {40.158844, 216.26427}, {42.68165, 220.03339}, {44.96943, 224.02136}, {46.93153, 228.2778}, {48.567802, 232.97285},
        {49.8973, 238.25839}, {50.93579, 244.05742}, {51.723934, 250.00128}, {52.375233, 255.63995}, {53.045284, 260.74847}, {53.836205, 265.47232}, {54.695786, 270.26633},
        {55.461372, 275.52798}, {55.989983, 281.34344}, {56.274117, 287.502}, {56.394707, 293.7592}, {56.430054, 300.01227}, {56.387283, 306.25302}, {56.167065, 312.411},
        {55.537426, 318.1988}, {54.141308, 323.152}, {51.595234, 326.86386}, {47.919804, 329.5005}, {43.486248, 331.45056}, {38.84064, 333.1023}, {34.575706, 334.92078},
        {31.150251, 337.349}, {28.868235, 340.61508}, {27.887743, 344.4987}, {28.1376, 348.41696}, {29.650593, 351.75925}, {33.26009, 353.66748}, {38.078976, 354.83185},
        {43.71894, 355.44928}, {49.611984, 355.5403}, {55.13079, 354.95807}, {59.81151, 353.46262}, {63.56058, 350.98898}, {66.7057, 347.8645}, {69.42414, 344.3466},
        {71.77962, 340.5271}, {73.84415, 336.50125}, {75.73141, 332.3465}, {77.48123, 328.05933}, {79.14187, 323.55243}, {80.833885, 318.87128}, {82.658936, 314.17667},
        {84.587715, 309.5259}, {86.50814, 304.8039}, {88.366844, 299.93735}, {92.31542, 301.76453}, {95.77539, 304.28143}, {98.58517, 307.67664}, {100.99267, 311.56473},
        {103.32278, 315.49}, {105.84407, 319.19705}, {108.69785, 322.61115}, {111.76671, 325.8782}, {114.733826, 329.18097}, {117.240074, 332.7064}, {119.20029, 336.4018},
        {113.41396, 337.96655}, {108.07243, 339.55994}, {103.56899, 341.37796}, {99.973274, 343.7059}, {97.4087, 346.8468}, {96.14728, 350.80594}, {96.18361, 355.0107},
        {97.415634, 358.8116}, {101.69061, 360.1079}, {106.83996, 360.77362}, {112.62377, 361.06064}, {118.75409, 361.16165}, {124.99663, 361.1883}, {131.25414, 361.18756},
        {137.50435, 361.17908}, {143.75366, 361.17105}, {150.00226, 361.16513}, {156.25308, 361.15973}, {162.51682, 361.13986}, {168.76797, 361.06747}, {174.88179, 360.86475},
        {180.59952, 360.43967}, {185.73871, 359.76547}, {190.332, 359.00412}, {194.657, 358.4765}, {198.93338, 358.44583}, {203.3482, 358.8527}, {208.02104, 359.3823},
        {213.0411, 359.72275}, {218.21379, 359.71152}, {223.25366, 359.28375}, {228.04672, 358.4229}, {232.77498, 357.18954}, {237.54051, 355.7237}, {242.19937, 354.12146},
        {246.48015, 352.3312}, {250.34946, 350.2139}, {254.01913, 347.7537}, {257.7628, 345.14136}, {261.60382, 342.5711}, {265.3833, 340.06305}, {268.91577, 337.44458},
        {272.20303, 334.60117}, {275.3244, 331.54755}, {278.31604, 328.37424}, {281.11124, 325.06677}, {283.69244, 321.54404}, {286.10022, 317.74963}, {288.41934, 313.7386},
        {290.6516, 309.59372}, {292.76538, 305.39816}, {294.69592, 301.18076}, {296.3964, 296.85577}, {297.83963, 292.20688}, {299.07642, 287.10214}, {300.19882, 281.75278},
        {301.2452, 276.5929}, {302.11066, 271.91138}, {302.6141, 267.66812}, {302.61044, 263.58676}, {302.105, 259.34854}, {301.2515, 254.64232}, {300.2599, 249.34175},
        {299.2891, 243.63878}, {298.35648, 238.0216}, {297.3639, 232.85954}, {296.20773, 228.1147}, {294.88116, 223.44876}, {293.44772, 218.68849}, {291.94928, 213.92085},
        {290.38348, 209.26761}, {288.76587, 204.62401}, {287.14444, 199.90337}, {285.537, 195.1911}, {283.8902, 190.66731}, {282.13126, 186.36194}, {280.24008, 182.13654},
        {278.2707, 177.83397}, {276.3336, 173.32162}, {274.52628, 168.64642}, {272.86218, 163.94168}, {271.28943, 159.2899}, {269.82916, 154.49423}, {268.69583, 149.30647},
        {268.24768, 143.75806}, {268.7915, 138.26778}, {270.37604, 133.34972}, {272.6895, 129.17024}, {275.1988, 125.434586}, {277.38953, 121.61225}, {278.86682, 117.279945},
        {279.4371, 112.456154}, {279.02313, 107.60487}, {277.57483, 103.300606}, {275.09598, 99.97442}, {271.73657, 97.80348}, {267.80078, 96.82267}, {263.68152, 96.98098},
        {259.73538, 98.17374}, {256.1379, 100.22786}, {252.90688, 102.92327}, {250.01208, 106.09064}, {247.41304, 109.63688}, {245.05344, 113.47923}, {242.8874, 117.52203},
        {240.98766, 121.78184}, {239.49301, 126.44341}, {238.51942, 131.72748}, {238.06505, 137.5864}, {238.08415, 143.68192}, {238.55956, 149.51894}, {239.50589, 154.79726},
        {240.8824, 159.56859}, {242.52937, 164.1888}, {244.2533, 168.8723}, {245.96036, 173.55882}, {247.69519, 178.05553}, {249.52957, 182.32832}, {251.46608, 186.4967},
        {253.44464, 190.66362}, {255.42204, 194.84715}, {257.38837, 199.05684}, {259.3282, 203.36719}, {261.1878, 207.89452}, {262.91174, 212.59163}, {264.51218, 217.30911},
        {266.05536, 221.97574}, {267.57437, 226.7792}, {269.01187, 231.8728}, {270.29718, 237.08153}, {271.44135, 242.07072}, {272.5125, 246.77544}, {273.51532, 251.55537},
        {274.3506, 256.79993}, {274.892, 262.60364}, {275.07626, 268.74597}, {274.88113, 274.88568}, {274.29578, 280.67554}, {273.34326, 285.887}, {272.12308, 290.62805},
        {270.71066, 295.22623}, {269.05035, 299.87332}, {266.9946, 304.36005}, {264.5077, 308.40512}, {261.73746, 311.97995}, {258.8456, 315.281}, {255.88158, 318.4389},
        {252.81157, 321.49368}, {249.58334, 324.44354}, {246.1202, 327.2535}, {242.38535, 329.8435}, {238.40265, 332.13925}, {234.18367, 334.10672}, {229.57301, 335.69028},
        {224.39426, 336.76273}, {218.7284, 337.12692}, {213.0653, 336.5442}, {208.13956, 334.71576}, {205.84149, 330.224}, {204.82251, 324.7845}, {204.67699, 318.87506},
        {205.00294, 312.73825}, {205.46198, 306.47668}, {205.84283, 300.15405}, {206.07176, 293.82492}, {206.1682, 287.52164}, {206.17558, 281.23578}, {206.10022, 274.9388},
        {205.9048, 268.6462}, {205.53088, 262.4849}, {204.91379, 256.7142}, {203.99721, 251.51016}, {202.7796, 246.77303}, {201.36063, 242.13435}, {199.85454, 237.39246},
        {198.29652, 232.635}, {196.61436, 228.09358}, {194.76, 223.80388}, {192.7519, 219.67247}, {190.58727, 215.67757}, {188.1722, 211.86609}, {185.48615, 208.23257},
        {182.68365, 204.66571}, {179.90529, 201.19691}, {177.01233, 197.99945}, {173.83737, 195.09764}, {170.41241, 192.28333}, {166.96045, 189.34132}, {163.56439, 186.32854},
        {160.22565, 183.32854}, {156.91379, 180.36804}, {153.61652, 177.41757}, {150.33865, 174.46411}, {147.08461, 171.50206}, {143.87015, 168.51202}, {140.70241, 165.48444},
        {137.57942, 162.42668}, {134.528, 159.30443}, {131.5752, 156.02739}, {128.8198, 152.38329}, {126.39281, 148.23119}, {124.388565, 143.6805}, {122.76492, 139.03294},
        {121.37932, 134.4075}, {120.11131, 129.58177}, {118.9332, 124.286415}, {117.869354, 118.61519}, {116.88682, 113.02049}, {115.866455, 107.86676}, {114.68069, 103.1088},
        {113.301994, 98.44234}, {111.8096, 93.703186}, {110.28937, 89.00129}, {108.74786, 84.47255}, {107.11394, 80.13549}, {105.32428, 75.8663}, {103.396454, 71.55175},
        {101.446045, 67.045654}, {99.57811, 62.358433}, {97.78786, 57.610382}, {95.99401, 52.949776}, {94.20198, 48.3377}, {92.53828, 43.716137}, {91.103424, 39.09855},
        {89.840225, 34.49211}, {88.616005, 29.787004}, {87.3305, 24.971867}, {85.92909, 20.289644}, {84.31905, 16.103336}, {81.03118, 15.813693}, {77.418686, 16.292107},
        {73.616516, 16.909182}, {69.8605, 16.775656}, {66.67243, 14.555481}, {64.06014, 11.145672}, {61.9321, 7.137358}, {60.07502, 2.9639065}
    };